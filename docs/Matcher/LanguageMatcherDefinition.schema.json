{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "title": "Language Matcher",
    "description": "Language parser grammar",
    "$id": "#/languageMatcher",
    "required": [
        "name",
        "startingFragment",
        "logMatches",
        "patterns",
        "fragments"
    ],
    "additionalProperties": false,
    "properties": {
        "name": {
            "$id": "#/properties/name",
            "type": "string",
            "description": "The name of the language",
            "examples": [
                "Lua"
            ],
            "pattern": "^(\\w+)$"
        },
        "startingFragment": {
            "$id": "#/properties/startingFragment",
            "type": "string",
            "description": "The fragment to use to begin parsing",
            "examples": [
                "Script"
            ],
            "pattern": "^(\\w+)$"
        },
        "indexingMode": {
            "$id": "#/properties/indexingMode",
            "type": "string",
            "description": "Token indexing configuration (lexing)",
            "enum": [
                "None",
                "Lazy",
                "Eager"
            ],
            "meta:enum": {
                "None": "Disable lexing",
                "Lazy": "Generate tokens on demand",
                "Eager": "Generate tokens before parsing"
            },
            "default": "Lazy",
            "examples": [
                "Eager"
            ]
        },
        "logMatches": {
            "$id": "#/properties/logMatches",
            "type": "boolean",
            "description": "Log fragment and pattern match successes and failures while parsing text",
            "default": false
        },
        "patterns": {
            "$id": "#/properties/patterns",
            "type": "array",
            "items": {
                "oneOf": [
                    {
                        "$id": "#/properties/patterns/items/properties/pattern",
                        "type": "object",
                        "title": "Pattern",
                        "description": "Patterns for generating tokens",
                        "required": [
                            "name",
                            "pattern"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "name": {
                                "$id": "#/properties/patterns/items/properties/pattern/name",
                                "type": "string",
                                "description": "Pattern reference name",
                                "examples": [
                                    "StringLiteral"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "pattern": {
                                "$id": "#/properties/patterns/items/properties/pattern/pattern",
                                "type": "string",
                                "description": "Pattern used to parse tokens from text",
                                "examples": [
                                    "\\s+"
                                ],
                                "pattern": "^(.*)$"
                            },
                            "isNoise": {
                                "$id": "#/properties/patterns/items/properties/pattern/isNoise",
                                "type": "boolean",
                                "description": "Text to be ignored while parsing",
                                "default": false
                            },
                            "isAuxiliary": {
                                "$id": "#/properties/patterns/items/properties/pattern/isAuxiliary",
                                "type": "boolean",
                                "description": "Pattern won't be used in pre-parse lexing but may be referenced by a fragment",
                                "default": false
                            }
                        }
                    },
                    {
                        "$id": "#/properties/patterns/items/properties/fragmentPattern",
                        "type": "object",
                        "title": "Fragment Pattern",
                        "description": "Generate tokens using a fragment in pre-parse lexing",
                        "required": [
                            "name",
                            "fragment"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "name": {
                                "$id": "#/properties/patterns/items/properties/fragmentPattern/name",
                                "type": "string",
                                "description": "Pattern reference name",
                                "examples": [
                                    "StringLiteral"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "pattern": {
                                "$id": "#/properties/patterns/items/properties/fragmentPattern/fragment",
                                "type": "string",
                                "description": "Fragment to run during pre-parse lexing",
                                "examples": [
                                    "SpecialSection"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "isNoise": {
                                "$id": "#/properties/patterns/items/properties/fragmentPattern/isNoise",
                                "type": "boolean",
                                "description": "Text to be ignored while parsing",
                                "default": false
                            },
                            "isAuxiliary": {
                                "$id": "#/properties/patterns/items/properties/fragmentPattern/isAuxiliary",
                                "type": "boolean",
                                "description": "Pattern won't be used in pre-parse lexing but may be referenced by a fragment",
                                "default": false
                            }
                        }
                    }
                ]
            }
        },
        "actions": {
            "$id": "#/properties/actions",
            "type": "array",
            "items": {
                "oneOf": [
                    {
                        "$id": "#/properties/actions/items/properties/createVariable",
                        "type": "object",
                        "title": "Create Variable",
                        "description": "Create a variable",
                        "required": [
                            "name",
                            "action",
                            "firstVariableName",
                            "source"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "name": {
                                "$id": "#/properties/actions/items/properties/createVariable/name",
                                "type": "string",
                                "description": "Action reference name",
                                "examples": [
                                    "CreateVar"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "action": {
                                "$id": "#/properties/actions/items/properties/createVariable/action",
                                "type": "string",
                                "description": "Action type",
                                "enum": [
                                    "CreateVariable"
                                ]
                            },
                            "firstVariableName": {
                                "$id": "#/properties/actions/items/properties/createVariable/firstVariableName",
                                "type": "string",
                                "description": "Name of variable to create",
                                "examples": [
                                    "Var1"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "source": {
                                "$id": "#/properties/actions/items/properties/createVariable/source",
                                "type": "string",
                                "description": "Value to set in the variable",
                                "enum": [
                                    "Value",
                                    "PartsCount",
                                    "PartsXml",
                                    "PartsLength",
                                    "StringPartsText",
                                    "StringPartsLength"
                                ],
                                "meta:enum": {
                                    "Value": "Use the value field",
                                    "PartsCount": "Count of fragment parts",
                                    "PartsXml": "XML representation of the fragment parts",
                                    "PartsLength": "Length of all fragment parts together",
                                    "StringPartsText": "Count of fragment string based parts",
                                    "StringPartsLength": "Concatenated text of all fragment string based parts"
                                }
                            },
                            "value": {
                                "$id": "#/properties/actions/items/properties/createVariable/value",
                                "type": [
                                    "integer",
                                    "string"
                                ],
                                "description": "Value to set in the variable if this is set as the source",
                                "examples": [
                                    "print",
                                    20
                                ]
                            }
                        }
                    },
                    {
                        "$id": "#/properties/actions/items/properties/updateVariable",
                        "type": "object",
                        "title": "Update Variable",
                        "description": "Update and perform an operation on a variable",
                        "required": [
                            "name",
                            "action",
                            "firstVariableName",
                            "secondVariableName",
                            "change"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "name": {
                                "$id": "#/properties/actions/items/properties/updateVariable/name",
                                "type": "string",
                                "description": "Action reference name",
                                "examples": [
                                    "SetVar"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "action": {
                                "$id": "#/properties/actions/items/properties/updateVariable/action",
                                "type": "string",
                                "description": "Action type",
                                "enum": [
                                    "UpdateVariable"
                                ]
                            },
                            "firstVariableName": {
                                "$id": "#/properties/actions/items/properties/updateVariable/firstVariableName",
                                "type": "string",
                                "description": "Name of variable to update and perform a operation against",
                                "examples": [
                                    "Var1"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "secondVariableName": {
                                "$id": "#/properties/actions/items/properties/updateVariable/secondVariableName",
                                "type": "string",
                                "description": "Name of variable to use on the other end of the operation",
                                "examples": [
                                    "Var2"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "change": {
                                "$id": "#/properties/actions/items/properties/updateVariable/change",
                                "type": "string",
                                "description": "Operation to perform",
                                "enum": [
                                    "Add",
                                    "Subtract",
                                    "Concat",
                                    "Remove",
                                    "Set"
                                ]
                            }
                        }
                    },
                    {
                        "$id": "#/properties/actions/items/properties/assert",
                        "type": "object",
                        "title": "Assert",
                        "description": "Assert an condition between two variables. If unsuccessful, the fragment is marked as failed",
                        "required": [
                            "name",
                            "action",
                            "firstVariableName",
                            "secondVariableName",
                            "assert"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "name": {
                                "$id": "#/properties/actions/items/properties/assert/name",
                                "type": "string",
                                "description": "Action reference name",
                                "examples": [
                                    "CheckVar"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "action": {
                                "$id": "#/properties/actions/items/properties/assert/action",
                                "type": "string",
                                "description": "Action type",
                                "enum": [
                                    "Assert"
                                ]
                            },
                            "firstVariableName": {
                                "$id": "#/properties/actions/items/properties/assert/firstVariableName",
                                "type": "string",
                                "description": "Name of the first variable in the condition",
                                "examples": [
                                    "Var1"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "secondVariableName": {
                                "$id": "#/properties/actions/items/properties/assert/secondVariableName",
                                "type": "string",
                                "description": "Name of the second variable in the condition",
                                "examples": [
                                    "Var2"
                                ],
                                "pattern": "^(\\w+)$"
                            },
                            "assert": {
                                "$id": "#/properties/actions/items/properties/assert/assert",
                                "type": "string",
                                "description": "The condition to assert between the two variables",
                                "enum": [
                                    "Equals",
                                    "NotEquals",
                                    "GreaterThan",
                                    "GreaterThanOrEquals",
                                    "LessThan",
                                    "LessThanOrEquals",
                                    "Contains",
                                    "StartsWith",
                                    "EndsWith",
                                    "MatchesPattern"
                                ],
                                "meta:enum": {
                                    "MatchesPattern": "Matches a pattern string (e.g. \\w+)"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "fragments": {
            "$id": "#/properties/fragments",
            "type": "array",
            "description": "Text parsing rules",
            "items": {
                "$id": "#/properties/fragments/items",
                "type": "object",
                "title": "Fragment",
                "description": "Text parsing rule",
                "required": [
                    "name",
                    "parts"
                ],
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "$id": "#/properties/fragments/items/properties/name",
                        "type": "string",
                        "description": "Fragment reference name",
                        "examples": [
                            "Script"
                        ],
                        "pattern": "^(\\w+)$"
                    },
                    "parts": {
                        "$id": "#/properties/fragments/items/properties/parts",
                        "type": "array",
                        "items": {
                            "$id": "#/properties/fragments/items/properties/parts/items",
                            "type": "string",
                            "description": "Names of nested fragments (surrounded by '[' and ']') and/or patterns",
                            "examples": [
                                "StringLiteral",
                                "[Script]"
                            ],
                            "pattern": "^(\\w+|\\[\\w+\\])$"
                        }
                    },
                    "actions": {
                        "$id": "#/properties/fragments/items/properties/actions",
                        "type": "array",
                        "items": {
                            "$id": "#/properties/fragments/items/properties/parts/items",
                            "type": "string",
                            "description": "Name of actions to run if the fragment matched successfully",
                            "examples": [
                                "SetLength",
                                "SetExpected",
                                "AssertLength"
                            ],
                            "pattern": "^(\\w+)$"
                        }
                    },
                    "partsDelimiter": {
                        "$id": "#/properties/fragments/items/properties/partsDelimiter",
                        "type": "string",
                        "description": "Name of the pattern that separates parts. Match not added to the AST",
                        "examples": [
                            "Whitespace"
                        ],
                        "pattern": "^(\\w+)$"
                    },
                    "partsDelimiterRequired": {
                        "$id": "#/properties/fragments/items/properties/partsDelimiterRequired",
                        "type": "boolean",
                        "description": "Require that parts are separated by the delimiter",
                        "default": true
                    },
                    "partsMatchMode": {
                        "$id": "#/properties/fragments/items/properties/partsMatchMode",
                        "type": "string",
                        "default": "Multiple",
                        "description": "Repetition constraint",
                        "enum": [
                            "Multiple",
                            "Ordered",
                            "One"
                        ],
                        "meta:enum": {
                            "Multiple": "Match any of the parts (one or more)",
                            "Ordered": "Match the parts in the order given",
                            "One": "Match one of the parts"
                        }
                    },
                    "partsPadding": {
                        "$id": "#/properties/fragments/items/properties/partsPadding",
                        "type": "string",
                        "description": "Name of the pattern that bounds the parts. Match not added to the AST",
                        "examples": [
                            "Whitespace"
                        ],
                        "pattern": "^(\\w+)$"
                    },
                    "start": {
                        "$id": "#/properties/fragments/items/properties/start",
                        "type": "string",
                        "description": "Name of the pattern that marks the beginning of the fragment. Match not added to the AST by default",
                        "examples": [
                            "OpenBracket"
                        ],
                        "pattern": "^(\\w+)$"
                    },
                    "end": {
                        "$id": "#/properties/fragments/items/properties/end",
                        "type": "string",
                        "description": "Name of the pattern that marks the end of the fragment. Match not added to the AST by default",
                        "examples": [
                            "CloseBracket"
                        ],
                        "pattern": "^(\\w+)$"
                    },
                    "minMatchedParts": {
                        "$id": "#/properties/fragments/items/properties/minMatchedParts",
                        "type": "integer",
                        "description": "Minimum number of parts that must be matched"
                    },
                    "isNoise": {
                        "$id": "#/properties/fragments/items/properties/isNoise",
                        "type": "boolean",
                        "description": "Do not add this part to the AST",
                        "default": false
                    },
                    "fallThroughMode": {
                        "$id": "#/properties/fragments/items/properties/fallThroughMode",
                        "type": "string",
                        "description": "Add the children of this fragment instead of this fragment to the AST, and discard this fragment",
                        "default": "None",
                        "enum": [
                            "None",
                            "Empty",
                            "One",
                            "All"
                        ],
                        "meta:enum": {
                            "None": "No fall through",
                            "Empty": "Fall through if there are no children",
                            "One": "Fall through if there is one or less child",
                            "All": "Always fall through"
                        }
                    },
                    "cacheable": {
                        "$id": "#/properties/fragments/items/properties/cacheable",
                        "type": "boolean",
                        "description": "Store the match result of this fragment to avoid the need to match against the same text segment again",
                        "default": false
                    },
                    "clearCache": {
                        "$id": "#/properties/fragments/items/properties/clearCache",
                        "type": "boolean",
                        "description": "Clear the cache if successfully matched",
                        "default": false
                    },
                    "expressionMode": {
                        "$id": "#/properties/fragments/items/properties/expressionMode",
                        "type": "string",
                        "description": "Expression parser mode",
                        "default": "None",
                        "enum": [
                            "None",
                            "BinaryTree",
                            "LikeNameTree"
                        ],
                        "meta:enum": {
                            "None": "No expression parsing",
                            "BinaryTree": "Expression tree to have a max of two child parts per node",
                            "LikeNameTree": "Expression tree combines parts that are the same type"
                        }
                    },
                    "expressionOrder": {
                        "$id": "#/properties/fragments/items/properties/expressionOrder",
                        "type": "integer",
                        "description": "Expression precedence within parent (lower number is higher precedence)"
                    },
                    "boundsAsParts": {
                        "$id": "#/properties/fragments/items/properties/boundsAsParts",
                        "type": "boolean",
                        "description": "Add the matched start and end patterns as parts",
                        "default": false
                    },
                    "discardBounds": {
                        "$id": "#/properties/fragments/items/properties/discardBounds",
                        "type": "boolean",
                        "description": "Start and end patterns do not move the read cursor",
                        "default": false
                    },
                    "negate": {
                        "$id": "#/properties/fragments/items/properties/negate",
                        "type": "boolean",
                        "description": "Negate the success or failure of the match",
                        "default": false
                    }
                }
            }
        }
    }
}